using OcrTranslator.TranslatorService;
using System;
using System.Drawing;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using OcrTranslator.Properties;

namespace CloudOcr {
    public class OcrTranslator {
        TesseractWrapper wrapper;
        public static void Main(string[] args) {
            OcrTranslator translator = new OcrTranslator();
            Bitmap bmp = Resources.phototest;
            String result = translator.translateWithOcr(bmp, Language.ENGLISH, Language.GERMAN);
            Console.WriteLine("Result: " + result);
            Console.ReadLine();
        }
        HttpRequestMessageProperty httpRequestProperty;
        LanguageServiceClient client;

        public OcrTranslator() {
            client = new LanguageServiceClient();
            wrapper = new TesseractWrapper();
            AdmAuthentication admAuthentication = new AdmAuthentication("tomskytwo", "1xtJMzibQZZX1NPAt2R0+aeDCIYp7DLq81lZ4nEdp1M=");
            AdmAccessToken admAccessToken = admAuthentication.GetAccessToken();
            string authenticationToken = "Bearer " + admAccessToken.access_token;

            httpRequestProperty = new HttpRequestMessageProperty();
            httpRequestProperty.Method = "POST";
            httpRequestProperty.Headers.Add("Authorization", authenticationToken);
        }
        public string translateWithOcr(Image img, string from, string to) {
            string tesseractResult = wrapper.doOcr(img, from);
            string languageTranslation = languageTranslate(tesseractResult, from, to);
            return languageTranslation;
        }

        public string languageTranslate(string text, string from, string to) {
            if (text == null) {
                return "";
            }
            using (OperationContextScope scope = new OperationContextScope(client.InnerChannel)) {
                OperationContext.Current.OutgoingMessageProperties[HttpRequestMessageProperty.Name] = httpRequestProperty;
                TranslateRequest request = new TranslateRequest("", text, from, to);
                TranslateResponse response = client.Translate(request);
                string translatedText = response.TranslateResult;
                return translatedText;
            }
        }
    }

    public class AdmAccessToken {
        [DataMember]
        public string access_token { get; set; }
        [DataMember]
        public string token_type { get; set; }
        [DataMember]
        public string expires_in { get; set; }
        [DataMember]
        public string scope { get; set; }
    }

    public class AdmAuthentication {
        public static readonly string DatamarketAccessUri = "https://datamarket.accesscontrol.windows.net/v2/OAuth2-13";
        private string clientId;
        private string cientSecret;
        private string request;

        public AdmAuthentication(string clientId, string clientSecret) {
            this.clientId = clientId;
            this.cientSecret = clientSecret;
            //If clientid or client secret has special characters, encode before sending request
            this.request = string.Format("grant_type=client_credentials&client_id={0}&client_secret={1}&scope=http://api.microsofttranslator.com", HttpUtility.UrlEncode(clientId), HttpUtility.UrlEncode(clientSecret));
        }

        public AdmAccessToken GetAccessToken() {
            return HttpPost(DatamarketAccessUri, this.request);
        }

        private AdmAccessToken HttpPost(string DatamarketAccessUri, string requestDetails) {
            //Prepare OAuth request 
            WebRequest webRequest = WebRequest.Create(DatamarketAccessUri);
            webRequest.ContentType = "application/x-www-form-urlencoded";
            webRequest.Method = "POST";
            byte[] bytes = Encoding.ASCII.GetBytes(requestDetails);
            webRequest.ContentLength = bytes.Length;
            using (Stream outputStream = webRequest.GetRequestStream()) {
                outputStream.Write(bytes, 0, bytes.Length);
            }

            using (WebResponse webResponse = webRequest.GetResponse()) {
                DataContractJsonSerializer serializer = new DataContractJsonSerializer(typeof(AdmAccessToken));
                //Get deserialized object from JSON stream
                AdmAccessToken token = (AdmAccessToken)serializer.ReadObject(webResponse.GetResponseStream());
                return token;
            }
        }
    }
}
